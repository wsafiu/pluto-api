#!/usr/bin/env node

/**
 * Module dependencies.
 */

const express = require('express');
const debug = require('debug')('plutoapi:server');
const http = require('http');

const expressApp = require('../app')
const { conn } = require('../database')


const app = express()
const port = normalizePort(process.env.PORT || '7001');
app.set('port', port);


const server = http.createServer(app);

(async function startServer () {

  await conn();
  expressApp(app)

  server.listen(port, () => {
    console.log("server listen on ", `http://localhost:${port}/`)
  });
  server.on('error', onError);
  server.on('listening', onListening);

})()

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
